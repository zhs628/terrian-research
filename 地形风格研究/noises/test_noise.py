'''  world_size:64x64, chars:['.', '*', '#']
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# # # # # # # # # # # # # # # # # # # # # # # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# # # # # # # # # # # # # # # # # # # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# # # # # # # # # # # # # # # # # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# # # # # # # # # # # # # # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# # # # # # # # # # # # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# # # # # # # # # # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . * * * * * * *
# # # # # # # # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . * *
# # # # # # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . .
# # # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
* * * * * * * * * * * . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
'''

from noises.perlin import Perlin
import math
from vmath import vec2i, vec2


def apply_operations(x, operations):
    for op, param in operations:
        if op == 'Power(x, param)':
            x = x ** param
        elif op == 'Log(x, param)':
            x = math.log(abs(x) + 1e-9)  # 加上小常数以避免对0取对数
        elif op == 'Sigmoid(x, param)':
            x = 1 / (1 + math.exp(-param * x))
        elif op == 'Threshold(x, param)':
            x = 1.0 if x > param else 0.0
        elif op == 'Add(x, param)':
            x = x + param
        elif op == 'Multiply(x, param)':
            x = x * param
    return x  

base_config = {'post_operation': 'None', 'post_param': 1.0, 'seed': 123456}


layers_config = [   {   'lacunarity': 2.0,
        'octaves(for pkpy)': 3,
        'operations': [],
        'persistence': 0.5,
        'scale': 100.0},
    {   'lacunarity': 2.0,
        'octaves(for pkpy)': 3,
        'operations': [],
        'persistence': 0.5,
        'scale': 200.0},
    {   'lacunarity': 2.0,
        'octaves(for pkpy)': 3,
        'operations': [],
        'persistence': 0.5,
        'scale': 300.0}]


def noise(v: vec2, seed=0)->float:
    '''对硬编码参数的Perlin噪声采样'''
    combined_noise = 0
    for layer in layers_config:
        scale, octaves, persistence, lacunarity, operations= (
            layer['scale'], layer['octaves(for pkpy)'], layer['persistence'],
            layer['lacunarity'], layer['operations']
        )
        noise = perlin_generator = Perlin(seed=seed).noise_ex(v.x/scale, v.y/scale, 0,
                    octaves,
                    persistence=persistence,
                    lacunarity=lacunarity)
        
        noise = apply_operations(noise, operations)
                
        combined_noise += noise

    combined_noise = apply_operations(combined_noise, [(base_config['post_operation'], base_config['post_param'])])
    return combined_noise

# ==== 可视化 ====
if __name__ == '__main__':

    
    from array2d import array2d
    import random
    
    
    def terrain_to_ascii(terrain, chars=(".", "*", "#"), size=(40, 40)):
        
        if not chars:
            raise ValueError("字符列表不能为空")

        # 获取地形数据的最小和最大值
        max_h_pos, max_h = max(terrain, key=lambda pos_value_pair: pos_value_pair[1])
        min_h_pos, min_h = min(terrain, key=lambda pos_value_pair: pos_value_pair[1])

        if min_h is None or max_h is None:
            return ""  # 空地形

        # 计算高度分段阈值
        num_chars = len(chars)
        if num_chars == 0:
            raise ValueError("字符列表不能为空")
        thresholds = []
        for i in range(1, num_chars):
            fraction = i / num_chars
            thresholds.append(min_h + fraction * (max_h - min_h))

        # 创建高度到字符的映射函数
        def height_to_char(h):
            for i, t in enumerate(thresholds):
                if h <= t:
                    return chars[i]
            return chars[-1]

        # 处理采样尺寸
        original_cols = terrain.n_cols
        original_rows = terrain.n_rows
        step = 1
        if size is not None:
            output_width, output_height = size
            if output_width <= 0 or output_height <= 0:
                raise ValueError("输出尺寸必须大于0")
            x_scale = original_cols / output_width
            y_scale = original_rows / output_height
            scale = max(x_scale, y_scale)
            step = max(int(scale), 1)

        # 采样原始地形
        sampled_terrain = terrain[::step, ::step]
        sampled_data = sampled_terrain.tolist()
        
        # 转换为ASCII字符
        ascii_art = []
        for row in sampled_data:
            ascii_row = " ".join([height_to_char(h) for h in row])
            ascii_art.append(ascii_row)

        # 添加垂直填充保持比例
        if size is not None:
            target_width, target_height = size
            current_lines = len(ascii_art)
            if current_lines < target_height:
                padding_needed = target_height - current_lines
                padding = random.choices(ascii_art, k=padding_needed)
                ascii_art.extend(padding)

        return "\n".join(ascii_art)

    result = array2d(64,64, default=noise)
    print(terrain_to_ascii(result, size=(result.width, result.height)))