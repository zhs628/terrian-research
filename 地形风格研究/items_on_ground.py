'''  world_size:128x128, chars:['.', '*', '#']
. . . . . . # . . . . . # . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . # . . . .
. . . . . . . . . . . . . . . . # . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . .
. . . . . . . . . . # . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . .
. . . # . . . . # . . . . . . . . . . . . . . . # . . . . . . . # . . . . . . . . . # # . . . # . . . . . . . . . . . . . . . .
. . . . . . # . . . . . . # . . . # # . . . . . . . . . . . # . . . . . . . . . # . . . . # . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . # . . . . . . . # . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . # . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . # . . . . . # . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . # . . . . . . . . . . . . .
. . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . # . . . . . . . . . . . . . . . . . . . .
. # . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . .
. . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . # . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # # . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . .
. # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . # . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . # . . . . . . . . . . . . . .
. . . . . # # . . . . . . # . . # . . . . . . . . . . . . . . . . . . # # . . . . . . . . . . . . . # . . . . . . . . . . . # #
. . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # # . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . # . . . . . .
. . # . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . .
. # . . . . . . . # . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . .
. . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . # # . . . . . . . . . . . . . . . . . . . . . . . . . # .
. # . . . . . . . . . . # . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . .
# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . # . . . . . . . . . . . . . . . . . . . # . . . . . . . .
. . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . .
. . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . # .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . # # . . . . . . . . . . . . . # # # # . # . . . . . . . . . . . . # . . . . . . . . . . . . . . . #
. # # . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . # . . . . . . . . . . . . . . # .
. . . . . . # . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. # . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . .
. . . . . . . . . . # # # . . # # . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . # . . . . # . . . . . . # . . # . . . # . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . # # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . # # . . # # . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . # . # . . . . . . . . .
. . . . # . . . . . . . . . . . # . . . . # . . # . . . . . . . . . # . . # . . . . . . . . . . . . . . . . # . . . . . # . . .
. . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . # . . . . . . . . # . . . # . . . . . . . . #
. . # # . # # . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . # . . . . . . . . .
. . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . # . . . . . # # . . # . . . . . . # . . . . # . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . # . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . # . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . .
. . . . # . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . #
. . . . . . . # . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . # . . # . . . . . . . . . . . . . . . . #
. . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # .
. . . . . . . . . . . # . . . . # . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . .
. . . . . . . # . . . . . . . . . . . . . . . . . # # . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . # # . . . . . . # . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # # . . . . . . . . . . . . . . . .
. . . . . . . . . . # # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . # . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . # . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . # . . . . . . . . . . . . . . . . . . . . . . . # . . .
. . . . . # . . . . . . . . . . . . . . . # . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . .
. # # . . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . # . . . . . . . . . . . # . . . # . . . . . . . . . . . . .
'''

import numpy as np
from noise import snoise2
import json
import math

def apply_operations(x, operations):
    for op, param in operations:
        if op == 'Power(x, param)':
            x = x ** param
        elif op == 'Log(x, param)':
            x = math.log(abs(x) + 1e-9)  # 加上小常数以避免对0取对数
        elif op == 'Sigmoid(x, param)':
            x = 1 / (1 + math.exp(-param * x))
        elif op == 'Threshold(x, param)':
            x = 1.0 if x > param else 0.0
        elif op == 'Add(x, param)':
            x = x + param
        elif op == 'Multiply(x, param)':
            x = x * param
    return x  

def basic_noise(x, y, scale, octaves, persistence, lacunarity):
    return snoise2(x/scale, y/scale,
            octaves=octaves,
            persistence=persistence,
            lacunarity=lacunarity)



post_process_config = json.loads('''
{
    "post_operation": "Threshold(x, param)",
    "post_param": 0.4
}
''')

layers_config = json.loads('''
[
    {
        "scale": 32.46,
        "octaves": 1,
        "persistence": 0.0,
        "lacunarity": 0.0,
        "operations": [
            [
                "Threshold(x, param)",
                0.51
            ],
            [
                "Multiply(x, param)",
                -1.0
            ]
        ]
    },
    {
        "scale": 10.0,
        "octaves": 3,
        "persistence": 1.0,
        "lacunarity": 2.0,
        "operations": []
    }
]
''')

def noise(x, y):
    '''对硬编码参数的Perlin噪声采样'''
    combined_noise = 0
    for layer in layers_config:
        scale, octaves, persistence, lacunarity, operations= (
            layer['scale'], layer['octaves'], layer['persistence'],
            layer['lacunarity'], layer['operations']
        )
        noise = snoise2(x/scale, y/scale,
                    octaves=octaves,
                    persistence=persistence,
                    lacunarity=lacunarity)

        noise = apply_operations(noise, operations)

        combined_noise += noise

    combined_noise = apply_operations(combined_noise, [(post_process_config['post_operation'], post_process_config['post_param'])])
    return combined_noise

# ==== 可视化 ====
if __name__ == '__main__':
    import matplotlib.pyplot as plt

    # ===== 噪声生成 =====
    world_size = 128
    x = np.arange(world_size)
    y = np.arange(world_size)
    X, Y = np.meshgrid(x, y)

    vectorized_noise = np.vectorize(noise)
    noise_array = vectorized_noise(X, Y)

    plt.figure(figsize=(10, 10))  # 设置画布大小
    plt.imshow(noise_array, cmap='rainbow')  
    plt.colorbar(label='Intensity') 
    plt.axis('off')  # 关闭坐标轴
    plt.show()  # 显示图像